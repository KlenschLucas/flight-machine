### Customers

### Create a new customer
POST localhost:8080/v1/customers
Content-Type: application/json

{
  "name": "John Doe",
  "email": "john@gmail.com",
  "phoneNumber": "1234567890"
}

### GET all customers - should see customer created above
GET http://localhost:8080/v1/customers


### GET customer by id - should see customer created above
GET http://localhost:8080/v1/customers/1

### PUT update customer - updates the customer created above - should fail since phoneNumber is blank
PUT http://localhost:8080/v1/customers/1
Content-Type: application/json

{
  "name": "Johnny Doe",
  "email": "klensch.lucas@gmail.com",
  "phoneNumber": ""
}

### PUT update customer - updates the customer created above - should pass since data is correct
PUT http://localhost:8080/v1/customers/1
Content-Type: application/json

{
  "name": "Johnny Doe",
  "email": "klensch.lucas@gmail.com",
  "phoneNumber": "0987654321"
}

### Flights

### Create a new flight - should fail since availableSeats is less than 1 - expect 400 Bad Request
POST localhost:8080/v1/flights
Content-Type: application/json

{
  "flightNumber": "ABC123",
  "origin": "MIA",
  "destination": "NYC",
  "departureDateTime": "2021-01-01T10:00:00",
  "arrivalDateTime": "2021-01-01T12:00:00",
  "availableSeats": 0,
  "price": 100.00
}

### Create a new flight - should pass since data is correct
POST localhost:8080/v1/flights
Content-Type: application/json

{
  "flightNumber": "ABC123",
  "origin": "MIA",
  "destination": "NYC",
  "departureDateTime": "2021-01-01T10:00:00",
  "arrivalDateTime": "2021-01-01T12:00:00",
  "availableSeats": 20,
  "price": 100.00
}

### Create a new flight - should pass since data is correct
POST localhost:8080/v1/flights
Content-Type: application/json

{
  "flightNumber": "JDK567",
  "origin": "MIA",
  "destination": "NYC",
  "departureDateTime": "2021-01-01T10:00:00",
  "arrivalDateTime": "2021-01-01T12:00:00",
  "availableSeats": 3,
  "price": 100.00
}


### GET all flights - should see flight created above
GET http://localhost:8080/v1/flights

### GET all flights with filters - should see flight created above
GET http://localhost:8080/v1/flights?origin=MIA&destination=NYC

### GET flight by id - should see flight created above
GET http://localhost:8080/v1/flights/1

### PUT update flight - updates the flight created above
PUT http://localhost:8080/v1/flights/1
Content-Type: application/json

{
  "flightNumber": "ABC123",
  "origin": "MIA",
  "destination": "NYC",
  "departureDateTime": "2021-01-01T10:00:00",
  "arrivalDateTime": "2021-01-01T12:00:00",
  "availableSeats": 20,
  "price": 120.00
}


### Create a new flight -but should fail since flightNumber is not unique - expect 400 Bad Request
POST localhost:8080/v1/flights
Content-Type: application/json

{
  "flightNumber": "ABC123",
  "origin": "MIA",
  "destination": "NYC",
  "departureDateTime": "2021-01-01T10:00:00",
  "arrivalDateTime": "2021-01-01T12:00:00",
  "availableSeats": 10,
  "price": 100.00
}


### Booking

### POST create booking1
POST http://localhost:8080/v1/bookings
Content-Type: application/json

{
  "flightNumber": "ABC123",
  "customerId": 1,
  "bookingDate": "2021-01-01",
  "numberOfSeatsBooked": 10
}
### POST create booking2 - should fail since there ain't enough seats - expect 400 Bad Request
POST http://localhost:8080/v1/bookings
Content-Type: application/json

{
  "flightNumber": "ABC123",
  "customerId": 1,
  "bookingDate": "2021-01-01",
  "numberOfSeatsBooked": 12
}

### POST create booking - should fail since flightNumber does not exist - expect 400 Bad Request
POST http://localhost:8080/v1/bookings
Content-Type: application/json

{
  "flightNumber": "JFK567",
  "customerId": 1,
  "bookingDate": "2022-01-01",
  "numberOfSeatsBooked": 50
}

### GET all bookings - should see bookings created above
GET http://localhost:8080/v1/bookings


### PUT update booking - updates the booking created above - should fail since there are more booked seats then available seats - expect 400 Bad Request
PUT http://localhost:8080/v1/bookings/1
Content-Type: application/json

{
  "flightNumber": "ABC123",
  "customerId": 1,
  "bookingDate": "2021-01-01",
  "numberOfSeatsBooked": 25
}

### DELETE booking - deletes the booking created above
DELETE http://localhost:8080/v1/bookings/1

### GET bookings with ID 1 - should get a 404 Not Found since booking was deleted
GET http://localhost:8080/v1/bookings/1
